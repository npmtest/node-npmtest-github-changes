{"/home/travis/build/npmtest/node-npmtest-github-changes/test.js":"/* istanbul instrument in package npmtest_github_changes */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-github-changes/lib.npmtest_github_changes.js":"/* istanbul instrument in package npmtest_github_changes */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_github_changes = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_github_changes = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-github-changes/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-github-changes && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_github_changes */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_github_changes\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_github_changes.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_github_changes.rollup.js'] =\n            local.assetsDict['/assets.npmtest_github_changes.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_github_changes.__dirname + '/lib.npmtest_github_changes.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-github-changes/node_modules/github-changes/bin/index.js":"#!/usr/bin/env node\n\nvar fs = require('fs');\nvar _ = require('lodash');\nvar http = require('http');\nvar https = require('https');\nvar domain = require('domain');\nvar moment = require('moment-timezone');\nvar parser = require('nomnom');\nvar semver = require('semver');\nvar Promise = require(\"bluebird\");\nvar GithubApi = require('github');\nvar linkParser = require('parse-link-header');\nvar ghauth = Promise.promisify(require('ghauth'));\nvar commitStream = require('github-commit-stream');\n\n// Increase number of concurrent requests\nhttp.globalAgent.maxSockets = 30;\nhttps.globalAgent.maxSockets = 30;\n\n// It might be faster to just go through commits on the branch\n// instead of iterating over closed issues, look into this later.\n//\n// Even better yet. I might just be able to do this with git log.\n// tags: git log --tags --simplify-by-decoration --format=\"%ci%n%d\"\n// prs: git log --grep=\"Merge pull request #\" --format=\"%s%n%ci%n%b\"\n\n\n// parse cli options\nopts = parser\n  .scriptName('github-changes')\n  .option('owner', {\n    abbr: 'o'\n  , help: '(required) owner of the Github repository'\n  , required: true\n  })\n  .option('repository', {\n    abbr: 'r'\n  , help: '(required) name of the Github repository'\n  , required: true\n  })\n  .option('data', {\n    abbr: 'd'\n  , help: '(DEPRECATED) use pull requests or commits (choices: pulls, commits)'\n  , choices: ['pulls', 'commits']\n  , default: 'commits'\n  })\n  .option('branch', {\n    abbr: 'b'\n  , help: 'name of the default branch'\n  , default: 'master'\n  })\n  .option('tag-name', {\n    abbr: 'n'\n  , help: 'tag name for upcoming release'\n  , default: 'upcoming'\n  })\n  .option('auth', {\n    abbr: 'a'\n  , help: 'prompt to auth with Github - use this for private repos and higher rate limits'\n  , flag: true\n  })\n  .option('token', {\n    abbr: 'k'\n  , help: 'need to use this or --auth for private repos and higher rate limits'\n  })\n  .option('file', {\n    abbr: 'f'\n  , help: 'name of the file to output the changelog to'\n  , default: 'CHANGELOG.md'\n  })\n  .option('title', {\n    abbr: 't'\n  , help: 'title to appear in the top of the changelog'\n  , default: 'Change Log'\n  })\n  .option('time-zone', {\n    abbr: 'z'\n  , help: 'time zone'\n  , default: 'UTC'\n  })\n  .option('date-format', {\n    abbr: 'm'\n  , help: 'date format'\n  , default: '(YYYY/MM/DD HH:mm Z)'\n  })\n  .option('verbose', {\n    abbr: 'v'\n  , help: 'output details'\n  , flag: true\n  })\n  .option('host', {\n    help: 'alternate host name to use with github enterprise'\n  , default: 'api.github.com'\n  })\n  .option('path-prefix', {\n    help: 'path-prefix for use with github enterprise'\n  , default: null\n  })\n  .option('between-tags', {\n    help: 'only diff between these two tags, separate by 3 dots ...'\n  })\n  .option('for-tag', {\n    help: 'only get changes for this tag'\n  })\n  .option('issue-body', {\n    help: '(DEPRECATED) include the body of the issue (--data MUST equal \\'pulls\\')'\n  , flag: true\n  })\n  .option('no-merges', {\n    help: 'do not include merges'\n  , flag: true\n  })\n  .option('only-merges', {\n    help: 'only include merges'\n  , flag: true\n  })\n  .option('only-pulls', {\n    help: 'only include pull requests'\n  , flag: true\n  })\n  .option('use-commit-body', {\n    help: 'use the commit body of a merge instead of the message - \"Merge branch...\"'\n  , flag: true\n  })\n  .option('order-semver', {\n    help: 'use semantic versioning for the ordering instead of the tag date'\n  , flag: true\n  })\n  .option('reverse-changes', {\n    help: 'reverse the order of changes within a release (show oldest first)'\n  , flag: true\n  })\n  .option('hide-tag-names', {\n    help: 'hide tag names in changelog'\n  , flag: true\n  })\n\n  // TODO\n  // .option('template', {\n  //   abbr: 't'\n  // , help: '(optional) template to use to generate the changelog'\n  // })\n  .parse()\n;\n\nif (opts['only-pulls']) opts.merges = true;\n\nvar betweenTags = [null, null];\nvar betweenTagsNames = null;\nif (opts['between-tags']) betweenTagsNames = opts['between-tags'].split('...');\n\nvar forTag = opts['for-tag'];\n\nvar commitsBySha = {}; // populated when calling getAllCommits\nvar currentDate = moment();\n\nvar github = new GithubApi({\n  version: '3.0.0'\n, timeout: 10000\n, protocol: 'https'\n, pathPrefix: opts['path-prefix']\n, host: opts.host\n});\n\n// github auth token\nvar token = null;\n\n// ~/.config/changelog.json will store the token\nvar authOptions = {\n  configName : 'changelog'\n, scopes     : ['user', 'public_repo', 'repo']\n};\n\nPromise.promisifyAll(github.repos);\nPromise.promisifyAll(github.issues);\nPromise.promisifyAll(github.pullRequests);\n\n// TODO: Could probably fetch releases so we don't have to get the commit data\n// for the sha of each tag to figure out the date. Could save alot on api\n// calls.\nvar getTags = function(){\n  var tagOpts = {\n    user: opts.owner\n  , repo: opts.repository\n  , per_page: 100\n  };\n  auth();\n  return github.repos.getTagsAsync(tagOpts).map(function(ref){\n    auth();\n    return github.repos.getCommitAsync({\n      user: tagOpts.user\n    , repo: tagOpts.repo\n    , sha: ref.commit.sha\n    }).then(function(commit){\n      opts.verbose && console.log('pulled commit data for tag - ', ref.name);\n      var tag = {\n        name: ref.name\n      , date: moment(commit.commit.committer.date)\n      };\n\n      // if betweenTags is specified then\n      if (betweenTagsNames && (betweenTagsNames.indexOf(tag.name)>-1)) {\n        betweenTags[betweenTagsNames.indexOf(tag.name)] = tag;\n      }\n\n      return tag;\n    });\n  }).then(function(tags){\n    return tags;\n  });\n};\n\nvar getPullRequests = function(){\n  var issueOpts = {\n    user: opts.owner\n  , repo: opts.repository\n  , state: 'closed'\n  , sort: 'updated'\n  , direction: 'desc'\n  , per_page: 100\n  , page: 1\n  // , since: null // TODO: this is an improvement to save API calls\n  };\n\n  var getIssues = function(options){\n    auth();\n    return github.issues.repoIssuesAsync(options).then(function(issues){\n      opts.verbose && console.log('issues pulled - ', issues.length);\n      opts.verbose && console.log('issues page - ', options.page);\n      return issues;\n    });\n  };\n\n  return getIssues(issueOpts).then(function(issues){\n    var linkHeader = linkParser(issues.meta.link)\n    var totalPages = (linkHeader && linkHeader.last) ? linkHeader.last.page : 1;\n\n    if (totalPages > issueOpts.page) {\n      var allReqs = [];\n      for(var i=issueOpts.page; i<totalPages; i++){\n        var newOptions = _.clone(issueOpts, true);\n        newOptions.page += i;\n        allReqs.push(getIssues(newOptions));\n      }\n      return Promise.all(allReqs).reduce(function(issues, moreIssues){\n        return issues.concat(moreIssues);\n      }, issues);\n    }\n    return issues;\n  }).map(function(issue){\n    if (!issue.pull_request.html_url) return;\n\n    auth();\n    return github.pullRequests.getAsync({\n      user: issueOpts.user\n    , repo: issueOpts.repo\n    , number: issue.number\n    }).then(function(pr){\n      if (pr.base.ref !== opts.branch) return;\n      if (!pr.merged_at) return;\n      return pr;\n    });\n  }).reduce(function(scrubbed, pr){\n    if (pr) scrubbed.push(pr);\n    return scrubbed;\n  }, [])\n  .then(function(prs){\n    return prs;\n  });\n};\n\nvar getAllCommits = function() {\n  var progress = 0;\n  opts.verbose && console.log('fetching commits');\n  return new Promise(function(resolve, reject){\n    var commits = [];\n    commitStream({\n      token: token\n    , host: opts.host\n    , pathPrefix: (opts['path-prefix'] == '') ? '' : opts['path-prefix']\n    , user: opts.owner\n    , repo: opts.repository\n    , sha: opts.branch\n    , per_page: 100\n    }).on('data', function(data){\n      if (++progress % 100 == 0) {\n        opts.verbose && console.log('fetched %d commits', progress)\n      }\n      commitsBySha[data.sha] = data;\n      commits = commits.concat(data);\n    }).on('end', function(error){\n      if (error) return reject(error);\n      opts.verbose && console.log('fetched all commits');\n      return resolve(commits);\n    });\n  });\n};\n\nvar getData = function() {\n  if (opts.data === 'commits') return getAllCommits();\n  return getPullRequests();\n};\n\nvar tagger = function(sortedTags, data) {\n  var date = null;\n  if (opts.data === 'commits') date = moment(data.commit.committer.date);\n  else date = moment(data.merged_at);\n\n  var current = null;\n  for (var i=0, len=sortedTags.length; i < len; i++) {\n    var tag = sortedTags[i];\n    if (tag.date < date) break;\n    current = tag;\n  }\n  if (!current) current = {name: opts['tag-name'], date: currentDate};\n  return current;\n};\n\nvar prFormatter = function(data) {\n  var currentTagName = '';\n  var output = \"## \" + opts.title + \"\\n\";\n  data.forEach(function(pr){\n    if (!opts['hide-tag-names']) {\n      if (pr.tag === null) {\n        currentTagName = opts['tag-name'];\n        output+= \"\\n### \" + opts['tag-name'];\n        output+= \"\\n\";\n      } else if (pr.tag.name != currentTagName) {\n        currentTagName = pr.tag.name;\n        output+= \"\\n### \" + pr.tag.name\n        output+= \" \" + pr.tag.date.tz(opts['time-zone']).format(opts['date-format']);\n        output+= \"\\n\";\n      }\n    }\n\n    output += \"- [#\" + pr.number + \"](\" + pr.html_url + \") \" + pr.title\n    if (pr.user && pr.user.login) output += \" (@\" + pr.user.login + \")\";\n    if (opts['issue-body'] && pr.body && pr.body.trim()) output += \"\\n\\n    >\" + pr.body.trim().replace(/\\n/ig, \"\\n    > \") +\"\\n\";\n\n    // output += \" \" + moment(pr.merged_at).utc().format(opts['date-format']);\n    output += \"\\n\";\n  });\n  return output.trim();\n};\n\nvar getCommitsInMerge = function(mergeCommit) {\n  // direct descendents of the mergeCommit\n  var directDescendents = {};\n\n  // store reachable commits\n  var store1 = {};\n  var store2 = {};\n\n  var currentCommit = mergeCommit;\n  while (currentCommit && currentCommit.parents && currentCommit.parents.length > 0) {\n    directDescendents[currentCommit.parents[0].sha] = true;\n    currentCommit = commitsBySha[currentCommit.parents[0].sha];\n  }\n\n  var getAllReachableCommits = function(sha, store) {\n    if (!commitsBySha[sha]) return;\n    store[sha]=true;\n    commitsBySha[sha].parents.forEach(function(parent){\n      if (directDescendents[parent.sha]) return;\n      if (store[parent.sha]) return; // don't revist commits we've explored\n      return getAllReachableCommits(parent.sha, store);\n    })\n  };\n\n  var parentShas = _.pluck(mergeCommit.parents, 'sha');\n  var notSha = parentShas.shift(); // value to pass to --not flag in git log\n  parentShas.forEach(function(sha){\n    return getAllReachableCommits(sha, store1);\n  });\n  getAllReachableCommits(notSha, store2);\n\n  return _.difference(\n    Object.keys(store1)\n  , Object.keys(store2)\n  ).map(function(sha){\n    return commitsBySha[sha];\n  });\n};\n\nvar commitFormatter = function(data) {\n  var currentTagName = '';\n  var output = \"## \" + opts.title + \"\\n\";\n  data.forEach(function(commit){\n    if (betweenTagsNames && commit.tag.date<=betweenTags[0].date) return;\n    if (betweenTagsNames && betweenTags[1] && commit.tag.date>betweenTags[1].date) return;\n    if (forTag && commit.tag.name !== forTag) return;\n\n    var isMerge = (commit.parents.length > 1);\n    var isPull = isMerge && /^Merge pull request #/i.test(commit.commit.message);\n    var isSquashAndMerge = false;\n\n    // handle checking for a squash & merge\n    if (!isPull) {\n      isPull = /\\s\\(\\#\\d+\\)/i.test(commit.commit.message); //contains ' (#123)'?\n      if (isPull) {\n        isMerge = true;\n        isSquashAndMerge = true;\n      }\n    }\n\n    // exits\n    if ((opts.merges === false) && isMerge) return '';\n    if ((opts['only-merges']) && commit.parents.length < 2) return '';\n    if ((opts['only-pulls']) && !isPull) return '';\n\n    // choose message content\n    var messages = commit.commit.message.split('\\n');\n    var message = messages.shift().trim();\n\n    if (!isSquashAndMerge && opts['use-commit-body'] && commit.parents.length > 1) {\n      message = messages.join(' ').trim() || message;\n    }\n\n    if (!opts['hide-tag-names']) {\n      if (commit.tag === null) {\n        currentTagName = opts['tag-name'];\n        output+= \"\\n### \" + opts['tag-name'];\n        output+= \"\\n\";\n      } else if (commit.tag.name != currentTagName) {\n        currentTagName = commit.tag.name;\n        output+= \"\\n### \" + commit.tag.name\n        output+= \" \" + commit.tag.date.tz(opts['time-zone']).format(opts['date-format']);\n        output+= \"\\n\";\n      }\n    }\n\n    // if commit is a merge then find all commits that belong to the merge\n    // and extract authors out of those. Do this for --only-merges and for\n    // --only-pulls\n    var authors = {};\n    if (isMerge && (opts['only-merges'] || opts['only-pulls'])) {\n      getCommitsInMerge(commit).forEach(function(c){\n        // ignore the author of a merge commit, they might have reviewed,\n        // resolved conflicts, and merged, but I don't think this alone\n        // should result in them being considered one of the authors in\n        // the pull request\n        if (c.parents.length > 1) return;\n\n        if (c.author && c.author.login) {\n          authors[c.author.login] = true;\n        }\n      });\n    }\n    authors = Object.keys(authors);\n\n    // if it's a pull request, then the link should be to the pull request\n    if (isPull) {\n      var prNumber = null;\n      var author = null;\n      var authorName = commit.commit.author && commit.commit.author.name;\n\n      if (isSquashAndMerge) {\n        prNumber = commit.commit.message.match(/\\(#\\d+\\)/)[0].replace(/\\(|\\)|#/g,'');\n        author = (commit.author && commit.author.login);\n      } else {\n        prNumber = commit.commit.message.split('#')[1].split(' ')[0];\n        author = (commit.commit.message.split(/\\#\\d+\\sfrom\\s/)[1]||'').split('/')[0];\n      }\n\n\n      var host = (opts.host === 'api.github.com') ? 'github.com' : opts.host;\n      var url = \"https://\"+host+\"/\"+opts.owner+\"/\"+opts.repository+\"/pull/\"+prNumber;\n      output += \"- [#\" + prNumber + \"](\" + url + \") \" + message;\n\n      if (authors.length) {\n        output += ' (' + authors.map(function(author){return '@' + author}).join(', ') + ')';\n      } else if (author) {\n        output += \" (@\" + author + \")\";\n      } else if (authorName) {\n        output += \" (\" + authorName + \")\";\n      }\n\n    } else { //otherwise link to the commit\n      output += \"- [\" + commit.sha.substr(0, 7) + \"](\" + commit.html_url + \") \" + message;\n\n      if (authors.length)\n        output += ' (' + authors.map(function(author){return '@' + author}).join(', ') + ')';\n      else if (commit.author && commit.author.login)\n        output += \" (@\" + commit.author.login + \")\";\n    }\n\n    // output += \" \" + moment(commit.commit.committer.date).utc().format(opts['date-format']);\n    output += \"\\n\";\n  });\n  return output.trim();\n};\n\nvar formatter = function(data) {\n  if (opts.data === 'commits') return commitFormatter(data);\n  return prFormatter(data);\n};\n\nvar getGithubToken = function() {\n  if (opts.token) return Promise.resolve({token: opts.token});\n  if (opts.auth) return ghauth(authOptions);\n  return Promise.resolve({});\n};\n\nvar auth = function() {\n  if (!token) return;\n  github.authenticate({type: 'oauth', token: token});\n};\n\nvar task = function() {\n  getGithubToken()\n    .then(function(authData){\n      if (!authData.token) return;\n      token = authData.token;\n    })\n    .then(function(){\n      return Promise.all([getTags(), getData()])\n    })\n    .spread(function(tags, data){\n      allTags = _.sortBy(tags, 'date').reverse();\n      return data;\n    })\n    .map(function(data){\n      data.tag = tagger(allTags, data);\n      data.tagDate = data.tag.date;\n      return data;\n    })\n    .then(function(data){\n      // order by commit date DESC by default / ASC if --reverse-changes given\n      var compareSign = (opts['reverse-changes']) ? -1 : 1;\n\n      // order by tag date then commit date\n      if (!opts['order-semver'] && opts.data === 'commits') {\n        data = data.sort(function(a,b){\n          var tagCompare = (a.tagDate - b.tagDate);\n          return (tagCompare) ? tagCompare : compareSign * (moment(a.commit.committer.date) - moment(b.commit.committer.date));\n        }).reverse();\n        return data;\n      } else if (!opts['order-semver'] && opts.data === 'pulls') {\n        data = data.sort(function(a,b){\n          var tagCompare = (a.tagDate - b.tagDate);\n          return (tagCompare) ? tagCompare : compareSign * (moment(a.merged_at) - moment(b.merged_at));\n        }).reverse();\n        return data;\n      }\n\n      // order by semver then commit date\n      data = data.sort(function(a,b){\n        var tagCompare = 0;\n        if (a.tag.name === b.tag.name) tagCompare = 0;\n        else if (a.tag.name === opts['tag-name']) tagCompare = 1;\n        else if (b.tag.name === opts['tag-name']) tagCompare -1;\n        else tagCompare = semver.compare(a.tag.name, b.tag.name);\n        return (tagCompare) ? tagCompare : compareSign * (moment(a.commit.committer.date) - moment(b.commit.committer.date));\n      }).reverse();\n      return data;\n    })\n    .then(function(data){\n      fs.writeFileSync(opts.file, formatter(data));\n    })\n    .then(function(){\n      process.exit(0);\n    })\n    .catch(function(error){\n      console.error('error', error);\n      console.error('stack', error.stack);\n      process.exit(1);\n    })\n  ;\n};\n\nvar done = function (error) {\n  if (!error) process.exit(0);\n  console.log(error);\n  console.log(error.stack);\n  process.exit(1);\n};\n\nvar runner = function () {\n  var d = domain.create();\n  d.on('error', done);\n  d.run(task);\n};\n\nrunner();\n"}